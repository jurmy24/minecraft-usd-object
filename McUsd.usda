#usda 1.0
(
    """
# USDA 1.0 file made by Mineways version 11.03, http://mineways.com
# World: _Simple Material Test
# Terrain file name: C:\\Users\\ehaines\\Documents\\_documents\\Github\\Mineways\\x64\\Debug\\..\\..\\TileMaker\\TileMaker\\terrainExt_JG-RTX256.png
# Color scheme: Standard
# Thu Sep  7 17:57:32 2023

# Selection location min to max: 181, 3, -95 to 193, 319, -83
#   Non-empty selection location min to max: 181, 3, -95 to 193, 5, -83

# Set render type: USD 1.0
# Units for the model vertex data itself: meters

# 476 vertices, 440 faces (880 triangles), 179 blocks, 7 billboards/bits
# block dimensions: X=13 by Y=4 (height) by Z=13 blocks
# Elevation shading: no
# Lighting: no
# Transparent water: no
# Map grid: no
# File type: Export individual textures to directory tex
# Texture output RGB: YES
# Texture output A: YES
# Texture output RGBA: YES
# Export individual blocks: no
# Custom material: no
# Export MDL: no
# Light scale: 30.000000
# Surface emit scale: 1000.000000
# Export lesser blocks: YES
# Fatten lesser blocks: no
# Simplify mesh: no
# Double all billboard faces: no
# Create composite overlay faces: no
# Center model: YES
# Use biomes: no
# Create block faces at the borders: YES
# Tree leaves solid: no
# Rotate model 0.000000 degrees
# Make Z the up direction instead of Y: no
# Scale model by making each block 1000 mm high
# Data operation options:
#   Fill air bubbles: no; Seal off entrances: no; Fill in isolated tunnels in base of model: no
#   Connect parts sharing an edge: no; Connect corner tips: no; Weld all shared edges: no
#   Delete floating objects: trees and parts smaller than 16 blocks: no
#   Hollow out bottom of model, making the walls 1000 mm thick: no; Superhollow: no
# Melt snow blocks: no
#   Debug: show separate parts as colors: no
#   Debug: show weld blocks in bright colors: no

# Full world path: C:\\Users\\Eric\\AppData\\Roaming\\.minecraft\\saves\\_Simple Material Test
# Full terrainExt.png path: C:\\Users\\Eric\\Downloads\\mineways11.03\\mineways\\terrainExt_JG-RTX256.png
# Full current path: C:\\Users\\Eric\\mineways11.03\\mineways
"""
    customLayerData = {
        dictionary cameraSettings = {
            string boundCamera = "/McUsd/Camera"
        }
        # hints for NVIDIA's USD Composer's rendering system:
        dictionary renderSettings = {
            bool "rtx:raytracing:fractionalCutoutOpacity" = 1
            token "rtx:rendermode" = "PathTracing"
            float3 "rtx:sceneDb:ambientLightColor" = (0, 0, 0)
        }
    }
    defaultPrim = "McUsd"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Xform "McUsd"
{

    def Xform "Geom"
    {
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (100, 100, 100)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "grass_block_top" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-6, 1, -6), (7, 1, 7)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 1, 0, 6, 7, 5, 4, 8, 9, 7, 6, 10, 11, 9, 8, 12, 13, 11, 10, 14, 15, 13, 12, 16, 17, 15, 14, 18, 19, 17, 16, 20, 21, 19, 18, 22, 23, 21, 20, 24, 25, 23, 22, 26, 27, 25, 24, 1, 28, 29, 2, 5, 30, 28, 1, 7, 31, 30, 5, 9, 32, 31, 7, 11, 33, 32, 9, 13, 34, 33, 11, 15, 35, 34, 13, 17, 36, 35, 15, 19, 37, 36, 17, 21, 38, 37, 19, 23, 39, 38, 21, 25, 40, 39, 23, 27, 41, 40, 25, 28, 42, 43, 29, 30, 44, 42, 28, 31, 45, 44, 30, 32, 46, 45, 31, 33, 47, 46, 32, 34, 48, 47, 33, 35, 49, 48, 34, 36, 50, 49, 35, 37, 51, 50, 36, 38, 52, 51, 37, 39, 53, 52, 38, 40, 54, 53, 39, 41, 55, 54, 40, 42, 56, 57, 43, 44, 58, 56, 42, 45, 59, 58, 44, 46, 60, 59, 45, 47, 61, 60, 46, 48, 62, 61, 47, 49, 63, 62, 48, 50, 64, 63, 49, 51, 65, 64, 50, 52, 66, 65, 51, 53, 67, 66, 52, 54, 68, 67, 53, 55, 69, 68, 54, 56, 70, 71, 57, 58, 72, 70, 56, 59, 73, 72, 58, 60, 74, 73, 59, 62, 75, 76, 61, 64, 77, 78, 63, 66, 79, 80, 65, 67, 81, 79, 66, 68, 82, 81, 67, 69, 83, 82, 68, 70, 84, 85, 71, 72, 86, 84, 70, 73, 87, 86, 72, 74, 88, 87, 73, 76, 89, 88, 74, 75, 90, 89, 76, 78, 91, 90, 75, 77, 92, 91, 78, 80, 93, 92, 77, 79, 94, 93, 80, 81, 95, 94, 79, 82, 96, 95, 81, 83, 97, 96, 82, 84, 98, 99, 85, 86, 100, 98, 84, 87, 101, 100, 86, 88, 102, 101, 87, 90, 103, 104, 89, 92, 105, 106, 91, 93, 107, 105, 92, 94, 108, 107, 93, 95, 109, 108, 94, 96, 110, 109, 95, 97, 111, 110, 96, 98, 112, 113, 99, 100, 114, 112, 98, 101, 115, 114, 100, 102, 116, 115, 101, 104, 117, 116, 102, 103, 118, 117, 104, 105, 119, 120, 106, 107, 121, 119, 105, 108, 122, 121, 107, 109, 123, 122, 108, 110, 124, 123, 109, 111, 125, 124, 110, 112, 126, 127, 113, 114, 128, 126, 112, 115, 129, 128, 114, 116, 130, 129, 115, 118, 131, 132, 117, 120, 133, 131, 118, 121, 134, 135, 119, 122, 136, 134, 121, 123, 137, 136, 122, 124, 138, 137, 123, 125, 139, 138, 124, 126, 140, 141, 127, 128, 142, 140, 126, 129, 143, 142, 128, 130, 144, 143, 129, 132, 145, 144, 130, 131, 146, 145, 132, 133, 147, 146, 131, 135, 148, 147, 133, 134, 149, 148, 135, 136, 150, 149, 134, 137, 151, 150, 136, 138, 152, 151, 137, 139, 153, 152, 138, 140, 154, 155, 141, 142, 156, 154, 140, 143, 157, 156, 142, 144, 158, 157, 143, 145, 159, 158, 144, 146, 160, 159, 145, 147, 161, 160, 146, 148, 162, 161, 147, 149, 163, 162, 148, 150, 164, 163, 149, 151, 165, 164, 150, 152, 166, 165, 151, 153, 167, 166, 152, 154, 168, 169, 155, 156, 170, 168, 154, 157, 171, 170, 156, 158, 172, 171, 157, 159, 173, 172, 158, 160, 174, 173, 159, 161, 175, 174, 160, 162, 176, 175, 161, 163, 177, 176, 162, 164, 178, 177, 163, 165, 179, 178, 164, 166, 180, 179, 165, 167, 181, 180, 166, 168, 182, 183, 169, 170, 184, 182, 168, 171, 185, 184, 170, 172, 186, 185, 171, 173, 187, 186, 172, 174, 188, 187, 173, 175, 189, 188, 174, 176, 190, 189, 175, 177, 191, 190, 176, 178, 192, 191, 177, 179, 193, 192, 178, 180, 194, 193, 179, 181, 195, 194, 180]
            rel material:binding = </McUsd/Looks/grass_block_top>
            point3f[] points = [(-6, 1, -5), (-5, 1, -5), (-5, 1, -6), (-6, 1, -6), (-6, 1, -4), (-5, 1, -4), (-6, 1, -3), (-5, 1, -3), (-6, 1, -2), (-5, 1, -2), (-6, 1, -1), (-5, 1, -1), (-6, 1, 0), (-5, 1, 0), (-6, 1, 1), (-5, 1, 1), (-6, 1, 2), (-5, 1, 2), (-6, 1, 3), (-5, 1, 3), (-6, 1, 4), (-5, 1, 4), (-6, 1, 5), (-5, 1, 5), (-6, 1, 6), (-5, 1, 6), (-6, 1, 7), (-5, 1, 7), (-4, 1, -5), (-4, 1, -6), (-4, 1, -4), (-4, 1, -3), (-4, 1, -2), (-4, 1, -1), (-4, 1, 0), (-4, 1, 1), (-4, 1, 2), (-4, 1, 3), (-4, 1, 4), (-4, 1, 5), (-4, 1, 6), (-4, 1, 7), (-3, 1, -5), (-3, 1, -6), (-3, 1, -4), (-3, 1, -3), (-3, 1, -2), (-3, 1, -1), (-3, 1, 0), (-3, 1, 1), (-3, 1, 2), (-3, 1, 3), (-3, 1, 4), (-3, 1, 5), (-3, 1, 6), (-3, 1, 7), (-2, 1, -5), (-2, 1, -6), (-2, 1, -4), (-2, 1, -3), (-2, 1, -2), (-2, 1, -1), (-2, 1, 0), (-2, 1, 1), (-2, 1, 2), (-2, 1, 3), (-2, 1, 4), (-2, 1, 5), (-2, 1, 6), (-2, 1, 7), (-1, 1, -5), (-1, 1, -6), (-1, 1, -4), (-1, 1, -3), (-1, 1, -2), (-1, 1, 0), (-1, 1, -1), (-1, 1, 2), (-1, 1, 1), (-1, 1, 4), (-1, 1, 3), (-1, 1, 5), (-1, 1, 6), (-1, 1, 7), (0, 1, -5), (0, 1, -6), (0, 1, -4), (0, 1, -3), (0, 1, -2), (0, 1, -1), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 1, 5), (0, 1, 6), (0, 1, 7), (1, 1, -5), (1, 1, -6), (1, 1, -4), (1, 1, -3), (1, 1, -2), (1, 1, 0), (1, 1, -1), (1, 1, 2), (1, 1, 1), (1, 1, 3), (1, 1, 4), (1, 1, 5), (1, 1, 6), (1, 1, 7), (2, 1, -5), (2, 1, -6), (2, 1, -4), (2, 1, -3), (2, 1, -2), (2, 1, -1), (2, 1, 0), (2, 1, 2), (2, 1, 1), (2, 1, 3), (2, 1, 4), (2, 1, 5), (2, 1, 6), (2, 1, 7), (3, 1, -5), (3, 1, -6), (3, 1, -4), (3, 1, -3), (3, 1, -2), (3, 1, 0), (3, 1, -1), (3, 1, 1), (3, 1, 3), (3, 1, 2), (3, 1, 4), (3, 1, 5), (3, 1, 6), (3, 1, 7), (4, 1, -5), (4, 1, -6), (4, 1, -4), (4, 1, -3), (4, 1, -2), (4, 1, -1), (4, 1, 0), (4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 1, 5), (4, 1, 6), (4, 1, 7), (5, 1, -5), (5, 1, -6), (5, 1, -4), (5, 1, -3), (5, 1, -2), (5, 1, -1), (5, 1, 0), (5, 1, 1), (5, 1, 2), (5, 1, 3), (5, 1, 4), (5, 1, 5), (5, 1, 6), (5, 1, 7), (6, 1, -5), (6, 1, -6), (6, 1, -4), (6, 1, -3), (6, 1, -2), (6, 1, -1), (6, 1, 0), (6, 1, 1), (6, 1, 2), (6, 1, 3), (6, 1, 4), (6, 1, 5), (6, 1, 6), (6, 1, 7), (7, 1, -5), (7, 1, -6), (7, 1, -4), (7, 1, -3), (7, 1, -2), (7, 1, -1), (7, 1, 0), (7, 1, 1), (7, 1, 2), (7, 1, 3), (7, 1, 4), (7, 1, 5), (7, 1, 6), (7, 1, 7)]
            normal3f[] primvars:normals = [(0, 1, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            texCoord2f[] primvars:st = [(0, 1), (0, 0), (1, 0), (1, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 3, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 0, 1, 0, 1, 2, 3, 3, 0, 1, 2, 2, 3, 0, 1, 2, 3, 0, 1, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 3, 0, 1, 2, 0, 1, 2, 3, 2, 3, 0, 1, 0, 1, 2, 3, 2, 3, 0, 1, 0, 1, 2, 3, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 1, 2, 3, 0, 1, 2, 3, 0, 0, 1, 2, 3, 1, 2, 3, 0, 0, 1, 2, 3, 0, 1, 2, 3, 3, 0, 1, 2, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 1, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 0, 1, 1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2, 2, 3, 0, 1, 3, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 3, 0, 1, 2, 2, 3, 0, 1, 1, 2, 3, 0, 0, 1, 2, 3, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 1, 2, 3, 0, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 2, 3, 0, 1, 0, 1, 2, 3, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 0, 1, 1, 2, 3, 0, 1, 2, 3, 0, 0, 1, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 3, 0, 1, 2, 0, 1, 2, 3, 2, 3, 0, 1, 3, 0, 1, 2, 1, 2, 3, 0, 3, 0, 1, 2, 1, 2, 3, 0, 3, 0, 1, 2, 0, 1, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 3, 0, 1, 2, 1, 2, 3, 0, 3, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 1, 2, 3, 0, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 0, 1, 2, 3, 3, 0, 1, 2, 0, 1, 2, 3, 3, 0, 1, 2, 0, 1, 2, 3, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 2, 3, 0, 1, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 1, 2, 3, 0, 3, 0, 1, 2, 1, 2, 3, 0, 3, 0, 1, 2, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 1, 1, 2, 3, 0, 0, 1, 2, 3, 2, 3, 0, 1, 1, 2, 3, 0, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 0, 1, 2, 3, 3, 0, 1, 2, 1, 2, 3, 0, 0, 1, 2, 3, 0, 1, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 1, 2, 3, 0, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "dirt" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-6, 0, -6), (7, 0, 7)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 1, 0, 6, 7, 5, 4, 8, 9, 7, 6, 10, 11, 9, 8, 12, 13, 11, 10, 14, 15, 13, 12, 16, 17, 15, 14, 18, 19, 17, 16, 20, 21, 19, 18, 22, 23, 21, 20, 24, 25, 23, 22, 26, 27, 25, 24, 28, 0, 3, 29, 30, 4, 0, 28, 31, 6, 4, 30, 32, 8, 6, 31, 33, 10, 8, 32, 34, 12, 10, 33, 35, 14, 12, 34, 36, 16, 14, 35, 37, 18, 16, 36, 38, 20, 18, 37, 39, 22, 20, 38, 40, 24, 22, 39, 41, 26, 24, 40, 42, 28, 29, 43, 44, 30, 28, 42, 45, 31, 30, 44, 46, 32, 31, 45, 47, 33, 32, 46, 48, 34, 33, 47, 49, 35, 34, 48, 50, 36, 35, 49, 51, 37, 36, 50, 52, 38, 37, 51, 53, 39, 38, 52, 54, 40, 39, 53, 55, 41, 40, 54, 56, 42, 43, 57, 58, 44, 42, 56, 59, 45, 44, 58, 60, 46, 45, 59, 61, 47, 46, 60, 62, 48, 47, 61, 63, 49, 48, 62, 64, 50, 49, 63, 65, 51, 50, 64, 66, 52, 51, 65, 67, 53, 52, 66, 68, 54, 53, 67, 69, 55, 54, 68, 70, 56, 57, 71, 72, 58, 56, 70, 73, 59, 58, 72, 74, 60, 59, 73, 75, 62, 61, 76, 77, 64, 63, 78, 79, 66, 65, 80, 81, 67, 66, 79, 82, 68, 67, 81, 83, 69, 68, 82, 84, 70, 71, 85, 86, 72, 70, 84, 87, 73, 72, 86, 88, 74, 73, 87, 89, 76, 74, 88, 90, 75, 76, 89, 91, 78, 75, 90, 92, 77, 78, 91, 93, 80, 77, 92, 94, 79, 80, 93, 95, 81, 79, 94, 96, 82, 81, 95, 97, 83, 82, 96, 98, 84, 85, 99, 100, 86, 84, 98, 101, 87, 86, 100, 102, 88, 87, 101, 103, 90, 89, 104, 105, 92, 91, 106, 107, 93, 92, 105, 108, 94, 93, 107, 109, 95, 94, 108, 110, 96, 95, 109, 111, 97, 96, 110, 112, 98, 99, 113, 114, 100, 98, 112, 115, 101, 100, 114, 116, 102, 101, 115, 117, 104, 102, 116, 118, 103, 104, 117, 119, 105, 106, 120, 121, 107, 105, 119, 122, 108, 107, 121, 123, 109, 108, 122, 124, 110, 109, 123, 125, 111, 110, 124, 126, 112, 113, 127, 128, 114, 112, 126, 129, 115, 114, 128, 130, 116, 115, 129, 131, 118, 117, 132, 133, 120, 118, 131, 134, 121, 119, 135, 136, 122, 121, 134, 137, 123, 122, 136, 138, 124, 123, 137, 139, 125, 124, 138, 140, 126, 127, 141, 142, 128, 126, 140, 143, 129, 128, 142, 144, 130, 129, 143, 145, 132, 130, 144, 146, 131, 132, 145, 147, 133, 131, 146, 148, 135, 133, 147, 149, 134, 135, 148, 150, 136, 134, 149, 151, 137, 136, 150, 152, 138, 137, 151, 153, 139, 138, 152, 154, 140, 141, 155, 156, 142, 140, 154, 157, 143, 142, 156, 158, 144, 143, 157, 159, 145, 144, 158, 160, 146, 145, 159, 161, 147, 146, 160, 162, 148, 147, 161, 163, 149, 148, 162, 164, 150, 149, 163, 165, 151, 150, 164, 166, 152, 151, 165, 167, 153, 152, 166, 168, 154, 155, 169, 170, 156, 154, 168, 171, 157, 156, 170, 172, 158, 157, 171, 173, 159, 158, 172, 174, 160, 159, 173, 175, 161, 160, 174, 176, 162, 161, 175, 177, 163, 162, 176, 178, 164, 163, 177, 179, 165, 164, 178, 180, 166, 165, 179, 181, 167, 166, 180, 182, 168, 169, 183, 184, 170, 168, 182, 185, 171, 170, 184, 186, 172, 171, 185, 187, 173, 172, 186, 188, 174, 173, 187, 189, 175, 174, 188, 190, 176, 175, 189, 191, 177, 176, 190, 192, 178, 177, 191, 193, 179, 178, 192, 194, 180, 179, 193, 195, 181, 180, 194, 76, 61, 60, 74, 78, 63, 62, 75, 80, 65, 64, 77, 104, 89, 88, 102, 106, 91, 90, 103, 132, 117, 116, 130, 135, 119, 120, 133]
            rel material:binding = </McUsd/Looks/dirt>
            point3f[] points = [(-5, 0, -5), (-6, 0, -5), (-6, 0, -6), (-5, 0, -6), (-5, 0, -4), (-6, 0, -4), (-5, 0, -3), (-6, 0, -3), (-5, 0, -2), (-6, 0, -2), (-5, 0, -1), (-6, 0, -1), (-5, 0, 0), (-6, 0, 0), (-5, 0, 1), (-6, 0, 1), (-5, 0, 2), (-6, 0, 2), (-5, 0, 3), (-6, 0, 3), (-5, 0, 4), (-6, 0, 4), (-5, 0, 5), (-6, 0, 5), (-5, 0, 6), (-6, 0, 6), (-5, 0, 7), (-6, 0, 7), (-4, 0, -5), (-4, 0, -6), (-4, 0, -4), (-4, 0, -3), (-4, 0, -2), (-4, 0, -1), (-4, 0, 0), (-4, 0, 1), (-4, 0, 2), (-4, 0, 3), (-4, 0, 4), (-4, 0, 5), (-4, 0, 6), (-4, 0, 7), (-3, 0, -5), (-3, 0, -6), (-3, 0, -4), (-3, 0, -3), (-3, 0, -2), (-3, 0, -1), (-3, 0, 0), (-3, 0, 1), (-3, 0, 2), (-3, 0, 3), (-3, 0, 4), (-3, 0, 5), (-3, 0, 6), (-3, 0, 7), (-2, 0, -5), (-2, 0, -6), (-2, 0, -4), (-2, 0, -3), (-2, 0, -2), (-2, 0, -1), (-2, 0, 0), (-2, 0, 1), (-2, 0, 2), (-2, 0, 3), (-2, 0, 4), (-2, 0, 5), (-2, 0, 6), (-2, 0, 7), (-1, 0, -5), (-1, 0, -6), (-1, 0, -4), (-1, 0, -3), (-1, 0, -2), (-1, 0, 0), (-1, 0, -1), (-1, 0, 2), (-1, 0, 1), (-1, 0, 4), (-1, 0, 3), (-1, 0, 5), (-1, 0, 6), (-1, 0, 7), (0, 0, -5), (0, 0, -6), (0, 0, -4), (0, 0, -3), (0, 0, -2), (0, 0, -1), (0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 0, 4), (0, 0, 5), (0, 0, 6), (0, 0, 7), (1, 0, -5), (1, 0, -6), (1, 0, -4), (1, 0, -3), (1, 0, -2), (1, 0, 0), (1, 0, -1), (1, 0, 2), (1, 0, 1), (1, 0, 3), (1, 0, 4), (1, 0, 5), (1, 0, 6), (1, 0, 7), (2, 0, -5), (2, 0, -6), (2, 0, -4), (2, 0, -3), (2, 0, -2), (2, 0, -1), (2, 0, 0), (2, 0, 2), (2, 0, 1), (2, 0, 3), (2, 0, 4), (2, 0, 5), (2, 0, 6), (2, 0, 7), (3, 0, -5), (3, 0, -6), (3, 0, -4), (3, 0, -3), (3, 0, -2), (3, 0, 0), (3, 0, -1), (3, 0, 1), (3, 0, 3), (3, 0, 2), (3, 0, 4), (3, 0, 5), (3, 0, 6), (3, 0, 7), (4, 0, -5), (4, 0, -6), (4, 0, -4), (4, 0, -3), (4, 0, -2), (4, 0, -1), (4, 0, 0), (4, 0, 1), (4, 0, 2), (4, 0, 3), (4, 0, 4), (4, 0, 5), (4, 0, 6), (4, 0, 7), (5, 0, -5), (5, 0, -6), (5, 0, -4), (5, 0, -3), (5, 0, -2), (5, 0, -1), (5, 0, 0), (5, 0, 1), (5, 0, 2), (5, 0, 3), (5, 0, 4), (5, 0, 5), (5, 0, 6), (5, 0, 7), (6, 0, -5), (6, 0, -6), (6, 0, -4), (6, 0, -3), (6, 0, -2), (6, 0, -1), (6, 0, 0), (6, 0, 1), (6, 0, 2), (6, 0, 3), (6, 0, 4), (6, 0, 5), (6, 0, 6), (6, 0, 7), (7, 0, -5), (7, 0, -6), (7, 0, -4), (7, 0, -3), (7, 0, -2), (7, 0, -1), (7, 0, 0), (7, 0, 1), (7, 0, 2), (7, 0, 3), (7, 0, 4), (7, 0, 5), (7, 0, 6), (7, 0, 7)]
            normal3f[] primvars:normals = [(0, -1, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            texCoord2f[] primvars:st = [(1, 0), (1, 1), (0, 1), (0, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 3, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 0, 1, 0, 1, 2, 3, 3, 0, 1, 2, 2, 3, 0, 1, 2, 3, 0, 1, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 3, 0, 1, 2, 0, 1, 2, 3, 2, 3, 0, 1, 0, 1, 2, 3, 2, 3, 0, 1, 0, 1, 2, 3, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 1, 2, 3, 0, 1, 2, 3, 0, 0, 1, 2, 3, 1, 2, 3, 0, 0, 1, 2, 3, 0, 1, 2, 3, 3, 0, 1, 2, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 1, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 0, 1, 1, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 2, 2, 3, 0, 1, 3, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 3, 0, 1, 2, 2, 3, 0, 1, 1, 2, 3, 0, 0, 1, 2, 3, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 1, 2, 3, 0, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 2, 3, 0, 1, 0, 1, 2, 3, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 0, 1, 1, 2, 3, 0, 1, 2, 3, 0, 0, 1, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 3, 0, 1, 2, 0, 1, 2, 3, 2, 3, 0, 1, 3, 0, 1, 2, 1, 2, 3, 0, 3, 0, 1, 2, 1, 2, 3, 0, 3, 0, 1, 2, 0, 1, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 3, 0, 1, 2, 1, 2, 3, 0, 3, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 1, 2, 3, 0, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 0, 1, 2, 3, 3, 0, 1, 2, 0, 1, 2, 3, 3, 0, 1, 2, 0, 1, 2, 3, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 2, 3, 0, 1, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 1, 2, 3, 0, 3, 0, 1, 2, 1, 2, 3, 0, 3, 0, 1, 2, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 1, 1, 2, 3, 0, 0, 1, 2, 3, 2, 3, 0, 1, 1, 2, 3, 0, 2, 3, 0, 1, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 0, 1, 2, 3, 3, 0, 1, 2, 1, 2, 3, 0, 0, 1, 2, 3, 0, 1, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 1, 2, 3, 0, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 0, 0, 1, 2, 3, 3, 0, 1, 2, 2, 3, 0, 1, 1, 2, 3, 0, 3, 0, 1, 2]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "grass_block_side" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-6, 0, -6), (7, 1, 7)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 1, 6, 7, 2, 6, 8, 9, 7, 8, 10, 11, 9, 10, 12, 13, 11, 12, 14, 15, 13, 14, 16, 17, 15, 16, 18, 19, 17, 18, 20, 21, 19, 20, 22, 23, 21, 22, 24, 25, 23, 24, 26, 27, 25, 26, 28, 29, 27, 28, 30, 31, 29, 32, 4, 5, 33, 30, 34, 35, 31, 36, 32, 33, 37, 34, 38, 39, 35, 40, 36, 37, 41, 38, 42, 43, 39, 44, 40, 41, 45, 42, 46, 47, 43, 48, 44, 45, 49, 46, 50, 51, 47, 52, 48, 49, 53, 50, 54, 55, 51, 56, 52, 53, 57, 54, 58, 59, 55, 60, 56, 57, 61, 58, 62, 63, 59, 64, 60, 61, 65, 62, 66, 67, 63, 68, 64, 65, 69, 66, 70, 71, 67, 72, 68, 69, 73, 70, 74, 75, 71, 76, 72, 73, 77, 78, 76, 77, 79, 80, 78, 79, 81, 82, 80, 81, 83, 84, 82, 83, 85, 86, 84, 85, 87, 88, 86, 87, 89, 90, 88, 89, 91, 92, 90, 91, 93, 94, 92, 93, 95, 96, 94, 95, 97, 98, 96, 97, 99, 100, 98, 99, 101, 102, 100, 101, 103, 74, 102, 103, 75]
            rel material:binding = </McUsd/Looks/grass_block_side>
            point3f[] points = [(-6, 0, -6), (-6, 0, -5), (-6, 1, -5), (-6, 1, -6), (-5, 0, -6), (-5, 1, -6), (-6, 0, -4), (-6, 1, -4), (-6, 0, -3), (-6, 1, -3), (-6, 0, -2), (-6, 1, -2), (-6, 0, -1), (-6, 1, -1), (-6, 0, 0), (-6, 1, 0), (-6, 0, 1), (-6, 1, 1), (-6, 0, 2), (-6, 1, 2), (-6, 0, 3), (-6, 1, 3), (-6, 0, 4), (-6, 1, 4), (-6, 0, 5), (-6, 1, 5), (-6, 0, 6), (-6, 1, 6), (-6, 0, 7), (-6, 1, 7), (-5, 0, 7), (-5, 1, 7), (-4, 0, -6), (-4, 1, -6), (-4, 0, 7), (-4, 1, 7), (-3, 0, -6), (-3, 1, -6), (-3, 0, 7), (-3, 1, 7), (-2, 0, -6), (-2, 1, -6), (-2, 0, 7), (-2, 1, 7), (-1, 0, -6), (-1, 1, -6), (-1, 0, 7), (-1, 1, 7), (0, 0, -6), (0, 1, -6), (0, 0, 7), (0, 1, 7), (1, 0, -6), (1, 1, -6), (1, 0, 7), (1, 1, 7), (2, 0, -6), (2, 1, -6), (2, 0, 7), (2, 1, 7), (3, 0, -6), (3, 1, -6), (3, 0, 7), (3, 1, 7), (4, 0, -6), (4, 1, -6), (4, 0, 7), (4, 1, 7), (5, 0, -6), (5, 1, -6), (5, 0, 7), (5, 1, 7), (6, 0, -6), (6, 1, -6), (6, 0, 7), (6, 1, 7), (7, 0, -6), (7, 1, -6), (7, 0, -5), (7, 1, -5), (7, 0, -4), (7, 1, -4), (7, 0, -3), (7, 1, -3), (7, 0, -2), (7, 1, -2), (7, 0, -1), (7, 1, -1), (7, 0, 0), (7, 1, 0), (7, 0, 1), (7, 1, 1), (7, 0, 2), (7, 1, 2), (7, 0, 3), (7, 1, 3), (7, 0, 4), (7, 1, 4), (7, 0, 5), (7, 1, 5), (7, 0, 6), (7, 1, 6), (7, 0, 7), (7, 1, 7)]
            normal3f[] primvars:normals = [(-1, 0, 0), (0, 0, -1), (0, 0, 1), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "iron_block" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(0, 1, -2), (1, 2, -1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 6, 4, 5, 7, 2, 7, 5, 3, 1, 6, 7, 2]
            rel material:binding = </McUsd/Looks/iron_block>
            point3f[] points = [(0, 1, -2), (0, 1, -1), (0, 2, -1), (0, 2, -2), (1, 1, -2), (1, 2, -2), (1, 1, -1), (1, 2, -1)]
            normal3f[] primvars:normals = [(-1, 0, 0), (0, 0, -1), (1, 0, 0), (0, 1, 0), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "gold_block" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(2, 1, -2), (3, 2, -1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 6, 4, 5, 7, 2, 7, 5, 3, 1, 6, 7, 2]
            rel material:binding = </McUsd/Looks/gold_block>
            point3f[] points = [(2, 1, -2), (2, 1, -1), (2, 2, -1), (2, 2, -2), (3, 1, -2), (3, 2, -2), (3, 1, -1), (3, 2, -1)]
            normal3f[] primvars:normals = [(-1, 0, 0), (0, 0, -1), (1, 0, 0), (0, 1, 0), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "diamond_block" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-2, 1, -2), (-1, 2, -1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 6, 4, 5, 7, 2, 7, 5, 3, 1, 6, 7, 2]
            rel material:binding = </McUsd/Looks/diamond_block>
            point3f[] points = [(-2, 1, -2), (-2, 1, -1), (-2, 2, -1), (-2, 2, -2), (-1, 1, -2), (-1, 2, -2), (-1, 1, -1), (-1, 2, -1)]
            normal3f[] primvars:normals = [(-1, 0, 0), (0, 0, -1), (1, 0, 0), (0, 1, 0), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "fern" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            bool doubleSided = 1
            float3[] extent = [(2.12577, 1, -0.934814), (3.03202, 2, -0.028564)]
            int[] faceVertexCounts = [4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7]
            rel material:binding = </McUsd/Looks/fern>
            point3f[] points = [(2.12577, 1, -0.934814), (3.03202, 1, -0.0285645), (3.03202, 2, -0.0285645), (2.12577, 2, -0.934814), (2.12577, 1, -0.0285645), (3.03202, 1, -0.934814), (3.03202, 2, -0.934814), (2.12577, 2, -0.0285645)]
            normal3f[] primvars:normals = [(-0.707107, 0, 0.707107), (0.707107, 0, 0.707107)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "piston_top" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-2, 2, 0), (-1, 2, 1)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </McUsd/Looks/piston_top>
            point3f[] points = [(-2, 2, 1), (-1, 2, 1), (-1, 2, 0), (-2, 2, 0)]
            normal3f[] primvars:normals = [(0, 1, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0]
            texCoord2f[] primvars:st = [(1, 1), (0, 1), (0, 0), (1, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "piston_side" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-2, 1, 0), (-1, 2, 1)]
            int[] faceVertexCounts = [4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 6, 4, 5, 7, 1, 6, 7, 2]
            rel material:binding = </McUsd/Looks/piston_side>
            point3f[] points = [(-2, 1, 0), (-2, 1, 1), (-2, 2, 1), (-2, 2, 0), (-1, 1, 0), (-1, 2, 0), (-1, 1, 1), (-1, 2, 1)]
            normal3f[] primvars:normals = [(-1, 0, 0), (0, 0, -1), (1, 0, 0), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "rail_corner" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            bool doubleSided = 1
            float3[] extent = [(-1, 1.0625, 1), (0, 1.0625, 2)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </McUsd/Looks/rail_corner>
            point3f[] points = [(-1, 1.0625, 1), (-1, 1.0625, 2), (0, 1.0625, 2), (0, 1.0625, 1)]
            normal3f[] primvars:normals = [(0, 1, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "rail" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            bool doubleSided = 1
            float3[] extent = [(-1, 1.0625, 2), (0, 1.0625, 3)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </McUsd/Looks/rail>
            point3f[] points = [(-1, 1.0625, 3), (0, 1.0625, 3), (0, 1.0625, 2), (-1, 1.0625, 2)]
            normal3f[] primvars:normals = [(0, 1, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "powered_rail" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            bool doubleSided = 1
            float3[] extent = [(-2, 1.0625, 1), (-1, 1.0625, 2)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </McUsd/Looks/powered_rail>
            point3f[] points = [(-2, 1.0625, 1), (-2, 1.0625, 2), (-1, 1.0625, 2), (-1, 1.0625, 1)]
            normal3f[] primvars:normals = [(0, 1, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "lava_still" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(0, 0, 0), (2, 1.746032, 1)]
            int[] faceVertexCounts = [4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 1, 8, 9, 2]
            rel material:binding = </McUsd/Looks/lava_still>
            point3f[] points = [(0, 1.69841, 1), (1, 1.74603, 1), (1, 1.74603, 0), (0, 1.69841, 0), (2, 0, 1), (1, 0, 1), (1, 0, 0), (2, 0, 0), (2, 1.22222, 1), (2, 1.16667, 0)]
            normal3f[] primvars:normals = [(-0.0475652, 0.998868, 0), (0, -1, 0), (0.463446, 0.884761, -0.0491534)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 2, 3, 0, 1, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "chiseled_quartz_block_top" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-2, 3, 2), (-1, 3, 3)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </McUsd/Looks/chiseled_quartz_block_top>
            point3f[] points = [(-2, 3, 3), (-1, 3, 3), (-1, 3, 2), (-2, 3, 2)]
            normal3f[] primvars:normals = [(0, 1, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "chiseled_quartz_block" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-2, 2, 2), (-1, 3, 3)]
            int[] faceVertexCounts = [4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 6, 4, 5, 7, 1, 6, 7, 2]
            rel material:binding = </McUsd/Looks/chiseled_quartz_block>
            point3f[] points = [(-2, 2, 2), (-2, 2, 3), (-2, 3, 3), (-2, 3, 2), (-1, 2, 2), (-1, 3, 2), (-1, 2, 3), (-1, 3, 3)]
            normal3f[] primvars:normals = [(-1, 0, 0), (0, 0, -1), (1, 0, 0), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "quartz_pillar" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-2, 1, 2), (-1, 2, 3)]
            int[] faceVertexCounts = [4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 6, 4, 5, 7, 1, 6, 7, 2]
            rel material:binding = </McUsd/Looks/quartz_pillar>
            point3f[] points = [(-2, 1, 2), (-2, 1, 3), (-2, 2, 3), (-2, 2, 2), (-1, 1, 2), (-1, 2, 2), (-1, 1, 3), (-1, 2, 3)]
            normal3f[] primvars:normals = [(-1, 0, 0), (0, 0, -1), (1, 0, 0), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "sunflower_back" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            bool doubleSided = 1
            float3[] extent = [(2.536144, 2.054085, 2.064179), (2.878164, 2.993778, 3.064179)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </McUsd/Looks/sunflower_back>
            point3f[] points = [(2.53614, 2.99378, 3.06418), (2.53614, 2.99378, 2.06418), (2.87816, 2.05409, 2.06418), (2.87816, 2.05409, 3.06418)]
            normal3f[] primvars:normals = [(-0.939693, -0.34202, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0]
            texCoord2f[] primvars:st = [(1, 1), (0, 1), (0, 0), (1, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "sunflower_front" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            bool doubleSided = 1
            float3[] extent = [(2.542019, 2.056223, 2.064179), (2.884039, 2.995915, 3.064179)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </McUsd/Looks/sunflower_front>
            point3f[] points = [(2.54202, 2.99592, 2.06418), (2.54202, 2.99592, 3.06418), (2.88404, 2.05622, 3.06418), (2.88404, 2.05622, 2.06418)]
            normal3f[] primvars:normals = [(0.939693, 0.34202, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0]
            texCoord2f[] primvars:st = [(1, 1), (0, 1), (0, 0), (1, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "sunflower_bottom" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            bool doubleSided = 1
            float3[] extent = [(2.144466, 1, 2.098555), (3.050716, 2, 3.004805)]
            int[] faceVertexCounts = [4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7]
            rel material:binding = </McUsd/Looks/sunflower_bottom>
            point3f[] points = [(2.14447, 1, 2.09855), (3.05072, 1, 3.0048), (3.05072, 2, 3.0048), (2.14447, 2, 2.09855), (2.14447, 1, 3.0048), (3.05072, 1, 2.09855), (3.05072, 2, 2.09855), (2.14447, 2, 3.0048)]
            normal3f[] primvars:normals = [(-0.707107, 0, 0.707107), (0.707107, 0, 0.707107)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "sunflower_top" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            bool doubleSided = 1
            float3[] extent = [(2.144466, 2, 2.098555), (3.050716, 3, 3.004805)]
            int[] faceVertexCounts = [4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7]
            rel material:binding = </McUsd/Looks/sunflower_top>
            point3f[] points = [(2.14447, 2, 2.09855), (3.05072, 2, 3.0048), (3.05072, 3, 3.0048), (2.14447, 3, 2.09855), (2.14447, 2, 3.0048), (3.05072, 2, 2.09855), (3.05072, 3, 2.09855), (2.14447, 3, 3.0048)]
            normal3f[] primvars:normals = [(-0.707107, 0, 0.707107), (0.707107, 0, 0.707107)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "purple_stained_glass" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            bool doubleSided = 1
            float3[] extent = [(0, 1, 2), (1, 2, 3)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 6, 4, 5, 7, 2, 7, 5, 3, 1, 6, 7, 2]
            rel material:binding = </McUsd/Looks/purple_stained_glass>
            point3f[] points = [(0, 1, 2), (0, 1, 3), (0, 2, 3), (0, 2, 2), (1, 1, 2), (1, 2, 2), (1, 1, 3), (1, 2, 3)]
            normal3f[] primvars:normals = [(-1, 0, 0), (0, 0, -1), (1, 0, 0), (0, 1, 0), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "prismarine" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(2, 1, 1), (3, 2, 2)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 6, 4, 5, 7, 2, 7, 5, 3, 1, 6, 7, 2]
            rel material:binding = </McUsd/Looks/prismarine>
            point3f[] points = [(2, 1, 1), (2, 1, 2), (2, 2, 2), (2, 2, 1), (3, 1, 1), (3, 2, 1), (3, 1, 2), (3, 2, 2)]
            normal3f[] primvars:normals = [(-1, 0, 0), (0, 0, -1), (1, 0, 0), (0, 1, 0), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "lava_flow" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(0, 1, 0), (2, 1.746032, 1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 1, 6, 7, 2, 8, 4, 5, 9, 10, 8, 9, 11, 6, 10, 11, 7]
            rel material:binding = </McUsd/Looks/lava_flow>
            point3f[] points = [(0, 1, 0), (0, 1, 1), (0, 1.69841, 1), (0, 1.69841, 0), (1, 1, 0), (1, 1.74603, 0), (1, 1, 1), (1, 1.74603, 1), (2, 1, 0), (2, 1.16667, 0), (2, 1, 1), (2, 1.22222, 1)]
            normal3f[] primvars:normals = [(-1, 0, 0), (0, 0, -1), (0, 0, 1), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            int[] primvars:normals:indices = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 2, 2]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 0.699219), (0, 0.699219), (0, 0.746094), (1, 0.746094), (0, 0.167969), (1, 0.167969), (0, 0.222656), (1, 0.222656)] (
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 2, 3, 0, 1, 2, 4, 0, 1, 5, 3, 0, 1, 5, 6, 0, 1, 7, 8, 0, 1, 9, 4]
            uniform token subdivisionScheme = "none"
        }
    }

    def Scope "Looks" (
        kind = "model"
    )
    {
        def Material "grass_block_top"
        {
            token outputs:surface.connect = </McUsd/Looks/grass_block_top/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/grass_block_top/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/grass_block_top/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/grass_block_top/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/grass_block_top_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/grass_block_top/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/grass_block_top_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/grass_block_top/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/grass_block_top_y.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/grass_block_top/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "dirt"
        {
            token outputs:surface.connect = </McUsd/Looks/dirt/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/dirt/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/dirt/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/dirt/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/dirt_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/dirt/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/dirt_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/dirt/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/dirt.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/dirt/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "grass_block_side"
        {
            token outputs:surface.connect = </McUsd/Looks/grass_block_side/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/grass_block_side/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/grass_block_side/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/grass_block_side/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/grass_block_side_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/grass_block_side/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "clamp"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/grass_block_side_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/grass_block_side/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "clamp"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/grass_block_side_y.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/grass_block_side/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "clamp"
                float3 outputs:rgb
            }
        }

        def Material "iron_block"
        {
            token outputs:surface.connect = </McUsd/Looks/iron_block/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.933333, 0.933333, 0.933333)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/iron_block/diffuse_texture.outputs:rgb>
                float inputs:metallic.connect = </McUsd/Looks/iron_block/metallic_texture.outputs:r>
                float3 inputs:normal.connect = </McUsd/Looks/iron_block/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/iron_block/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/iron_block_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/iron_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/iron_block_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/iron_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "metallic_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/iron_block_m.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/iron_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/iron_block.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/iron_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "gold_block"
        {
            token outputs:surface.connect = </McUsd/Looks/gold_block/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.996078, 0.968627, 0.305882)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/gold_block/diffuse_texture.outputs:rgb>
                float inputs:metallic.connect = </McUsd/Looks/gold_block/metallic_texture.outputs:r>
                float3 inputs:normal.connect = </McUsd/Looks/gold_block/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/gold_block/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/gold_block_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/gold_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/gold_block_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/gold_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "metallic_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/gold_block_m.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/gold_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/gold_block.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/gold_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "diamond_block"
        {
            token outputs:surface.connect = </McUsd/Looks/diamond_block/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.498039, 0.890196, 0.87451)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/diamond_block/diffuse_texture.outputs:rgb>
                float inputs:metallic.connect = </McUsd/Looks/diamond_block/metallic_texture.outputs:r>
                float3 inputs:normal.connect = </McUsd/Looks/diamond_block/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/diamond_block/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/diamond_block_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/diamond_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/diamond_block_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/diamond_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "metallic_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/diamond_block_m.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/diamond_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/diamond_block.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/diamond_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "fern"
        {
            token outputs:surface.connect = </McUsd/Looks/fern/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/fern/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float inputs:opacity.connect = </McUsd/Looks/fern/diffuse_texture.outputs:a>
                float inputs:opacityThreshold = 0.5
                float inputs:roughness = 1
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/fern_y.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/fern/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:a
                float3 outputs:rgb
            }
        }

        def Material "piston_top"
        {
            token outputs:surface.connect = </McUsd/Looks/piston_top/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.584314, 0.466667, 0.294118)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/piston_top/diffuse_texture.outputs:rgb>
                float inputs:metallic.connect = </McUsd/Looks/piston_top/metallic_texture.outputs:r>
                float3 inputs:normal.connect = </McUsd/Looks/piston_top/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/piston_top/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/piston_top_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/piston_top/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/piston_top_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/piston_top/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "metallic_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/piston_top_m.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/piston_top/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/piston_top.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/piston_top/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "piston_side"
        {
            token outputs:surface.connect = </McUsd/Looks/piston_side/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.584314, 0.466667, 0.294118)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/piston_side/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/piston_side/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/piston_side/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/piston_side_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/piston_side/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/piston_side_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/piston_side/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/piston_side.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/piston_side/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "rail_corner"
        {
            token outputs:surface.connect = </McUsd/Looks/rail_corner/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.407843, 0.407843, 0.407843)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/rail_corner/diffuse_texture.outputs:rgb>
                float inputs:metallic.connect = </McUsd/Looks/rail_corner/metallic_texture.outputs:r>
                float3 inputs:normal.connect = </McUsd/Looks/rail_corner/normal_texture.outputs:rgb>
                float inputs:opacity.connect = </McUsd/Looks/rail_corner/diffuse_texture.outputs:a>
                float inputs:opacityThreshold = 0.5
                float inputs:roughness.connect = </McUsd/Looks/rail_corner/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/rail_corner_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/rail_corner/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/rail_corner_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/rail_corner/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float3 outputs:rgb
            }

            def Shader "metallic_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/rail_corner_m.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/rail_corner/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:r
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/rail_corner.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/rail_corner/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:a
                float3 outputs:rgb
            }
        }

        def Material "rail"
        {
            token outputs:surface.connect = </McUsd/Looks/rail/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.407843, 0.407843, 0.407843)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/rail/diffuse_texture.outputs:rgb>
                float inputs:metallic.connect = </McUsd/Looks/rail/metallic_texture.outputs:r>
                float3 inputs:normal.connect = </McUsd/Looks/rail/normal_texture.outputs:rgb>
                float inputs:opacity.connect = </McUsd/Looks/rail/diffuse_texture.outputs:a>
                float inputs:opacityThreshold = 0.5
                float inputs:roughness.connect = </McUsd/Looks/rail/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/rail_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/rail/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/rail_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/rail/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "metallic_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/rail_m.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/rail/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/rail.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/rail/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "repeat"
                float outputs:a
                float3 outputs:rgb
            }
        }

        def Material "powered_rail"
        {
            token outputs:surface.connect = </McUsd/Looks/powered_rail/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.670588, 0.0117647, 0.00392157)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/powered_rail/diffuse_texture.outputs:rgb>
                float inputs:metallic.connect = </McUsd/Looks/powered_rail/metallic_texture.outputs:r>
                float3 inputs:normal.connect = </McUsd/Looks/powered_rail/normal_texture.outputs:rgb>
                float inputs:opacity.connect = </McUsd/Looks/powered_rail/diffuse_texture.outputs:a>
                float inputs:opacityThreshold = 0.5
                float inputs:roughness.connect = </McUsd/Looks/powered_rail/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/powered_rail_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/powered_rail/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/powered_rail_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/powered_rail/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "metallic_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/powered_rail_m.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/powered_rail/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/powered_rail.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/powered_rail/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "repeat"
                float outputs:a
                float3 outputs:rgb
            }
        }

        def Material "lava_still"
        {
            token outputs:surface.connect = </McUsd/Looks/lava_still/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.960784, 0.427451, 0)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/lava_still/diffuse_texture.outputs:rgb>
                color3f inputs:emissiveColor.connect = </McUsd/Looks/lava_still/emissive_texture.outputs:rgb>
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.752941
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/lava_still.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/lava_still/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "emissive_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/lava_still_e.png@
                float2 inputs:st.connect = </McUsd/Looks/lava_still/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "chiseled_quartz_block_top"
        {
            token outputs:surface.connect = </McUsd/Looks/chiseled_quartz_block_top/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/chiseled_quartz_block_top/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/chiseled_quartz_block_top/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/chiseled_quartz_block_top/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_top_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/chiseled_quartz_block_top/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_top_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/chiseled_quartz_block_top/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_top.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/chiseled_quartz_block_top/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "chiseled_quartz_block"
        {
            token outputs:surface.connect = </McUsd/Looks/chiseled_quartz_block/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/chiseled_quartz_block/diffuse_texture.outputs:rgb>
                float inputs:metallic.connect = </McUsd/Looks/chiseled_quartz_block/metallic_texture.outputs:r>
                float3 inputs:normal.connect = </McUsd/Looks/chiseled_quartz_block/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/chiseled_quartz_block/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/chiseled_quartz_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/chiseled_quartz_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "metallic_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block_m.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/chiseled_quartz_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/chiseled_quartz_block.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/chiseled_quartz_block/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "quartz_pillar"
        {
            token outputs:surface.connect = </McUsd/Looks/quartz_pillar/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.878431, 0.866667, 0.843137)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/quartz_pillar/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/quartz_pillar/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/quartz_pillar/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/quartz_pillar_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/quartz_pillar/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/quartz_pillar_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/quartz_pillar/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/quartz_pillar.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/quartz_pillar/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "sunflower_back"
        {
            token outputs:surface.connect = </McUsd/Looks/sunflower_back/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/sunflower_back/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/sunflower_back/normal_texture.outputs:rgb>
                float inputs:opacity.connect = </McUsd/Looks/sunflower_back/diffuse_texture.outputs:a>
                float inputs:opacityThreshold = 0.5
                float inputs:roughness.connect = </McUsd/Looks/sunflower_back/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/sunflower_back_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_back/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/sunflower_back_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_back/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/sunflower_back.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_back/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:a
                float3 outputs:rgb
            }
        }

        def Material "sunflower_front"
        {
            token outputs:surface.connect = </McUsd/Looks/sunflower_front/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/sunflower_front/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/sunflower_front/normal_texture.outputs:rgb>
                float inputs:opacity.connect = </McUsd/Looks/sunflower_front/diffuse_texture.outputs:a>
                float inputs:opacityThreshold = 0.5
                float inputs:roughness.connect = </McUsd/Looks/sunflower_front/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/sunflower_front_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_front/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/sunflower_front_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_front/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/sunflower_front.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_front/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:a
                float3 outputs:rgb
            }
        }

        def Material "sunflower_bottom"
        {
            token outputs:surface.connect = </McUsd/Looks/sunflower_bottom/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/sunflower_bottom/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/sunflower_bottom/normal_texture.outputs:rgb>
                float inputs:opacity.connect = </McUsd/Looks/sunflower_bottom/diffuse_texture.outputs:a>
                float inputs:opacityThreshold = 0.5
                float inputs:roughness.connect = </McUsd/Looks/sunflower_bottom/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/sunflower_bottom_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_bottom/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/sunflower_bottom_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_bottom/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/sunflower_bottom.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_bottom/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:a
                float3 outputs:rgb
            }
        }

        def Material "sunflower_top"
        {
            token outputs:surface.connect = </McUsd/Looks/sunflower_top/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.54902, 0.741176, 0.341176)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/sunflower_top/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/sunflower_top/normal_texture.outputs:rgb>
                float inputs:opacity.connect = </McUsd/Looks/sunflower_top/diffuse_texture.outputs:a>
                float inputs:opacityThreshold = 0.5
                float inputs:roughness.connect = </McUsd/Looks/sunflower_top/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/sunflower_top_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_top/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/sunflower_top_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_top/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/sunflower_top.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/sunflower_top/uv_reader.outputs:result>
                token inputs:wrapS = "clamp"
                token inputs:wrapT = "clamp"
                float outputs:a
                float3 outputs:rgb
            }
        }

        def Material "purple_stained_glass"
        {
            token outputs:surface.connect = </McUsd/Looks/purple_stained_glass/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.937255, 0.937255, 0.937255)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/purple_stained_glass/diffuse_texture.outputs:rgb>
                float inputs:ior = 1.52
                float inputs:metallic.connect = </McUsd/Looks/purple_stained_glass/metallic_texture.outputs:r>
                float3 inputs:normal.connect = </McUsd/Looks/purple_stained_glass/normal_texture.outputs:rgb>
                float inputs:opacity.connect = </McUsd/Looks/purple_stained_glass/diffuse_texture.outputs:a>
                float inputs:opacityThreshold = 0
                float inputs:roughness.connect = </McUsd/Looks/purple_stained_glass/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/purple_stained_glass_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/purple_stained_glass/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/purple_stained_glass_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/purple_stained_glass/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "metallic_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/purple_stained_glass_m.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/purple_stained_glass/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/purple_stained_glass.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/purple_stained_glass/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:a
                float3 outputs:rgb
            }
        }

        def Material "prismarine"
        {
            token outputs:surface.connect = </McUsd/Looks/prismarine/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.4, 0.678431, 0.631373)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/prismarine/diffuse_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/prismarine/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness.connect = </McUsd/Looks/prismarine/roughness_texture.outputs:r>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "roughness_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/prismarine_r.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/prismarine/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:r
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/prismarine_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/prismarine/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/prismarine.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/prismarine/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "lava_flow"
        {
            token outputs:surface.connect = </McUsd/Looks/lava_flow/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.960784, 0.427451, 0)
                color3f inputs:diffuseColor.connect = </McUsd/Looks/lava_flow/diffuse_texture.outputs:rgb>
                color3f inputs:emissiveColor.connect = </McUsd/Looks/lava_flow/emissive_texture.outputs:rgb>
                float inputs:metallic = 0
                float3 inputs:normal.connect = </McUsd/Looks/lava_flow/normal_texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.74902
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uv_reader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "normal_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (-1, 1, -1, -1)
                asset inputs:file = @./McUsd_materials/tex/lava_flow_n.png@
                float4 inputs:scale = (2, -2, 2, 2)
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </McUsd/Looks/lava_flow/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "diffuse_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/lava_flow.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </McUsd/Looks/lava_flow/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "emissive_texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./McUsd_materials/tex/lava_flow_e.png@
                float2 inputs:st.connect = </McUsd/Looks/lava_flow/uv_reader.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
} # close McUsd Xform

